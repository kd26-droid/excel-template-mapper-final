name: Excel Template Mapper - Azure Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: factwise-excel-mapper-backend
  AZURE_WEBAPP_PACKAGE_PATH: './backend'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        # Current directory is already backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check Django setup
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
      run: |
        # Current directory is already backend
        python manage.py check

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Check package.json
      run: |
        cd frontend
        npm list --depth=0 || true
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  deploy-backend:
    name: Deploy Backend to Azure
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        # Current directory is already backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Collect static files
      env:
        SECRET_KEY: temp-key-for-collectstatic
        DEBUG: False
        DATABASE_URL: sqlite:///temp.db
      run: |
        # Current directory is already backend
        python manage.py collectstatic --noinput
    
    - name: Create deployment package
      run: |
        # Current directory is already backend
        zip -r ../backend-deployment.zip . -x "venv/*" "*.pyc" "__pycache__/*" "db.sqlite3" "temp_downloads/*" "uploaded_files/*" "logs/*"
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: backend-deployment.zip
    
    - name: Run post-deployment commands
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          az webapp config appsettings set \
            --resource-group factwise-excel-mapper \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings DEPLOYMENT_DATE="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

  deploy-frontend:
    name: Deploy Frontend to Azure Static Web Apps
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install and build
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend"
        build_location: "build"
        api_location: ""
    
    - name: Add deployment comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '‚úÖ Deployment preview is ready! Check the Azure Static Web Apps deployment status.'
          })

  notification:
    name: Deployment Notification
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deployment Status
      run: |
        if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "Frontend: https://mango-beach-0786e2d0f.2.azurestaticapps.net"
          echo "Backend: https://factwise-excel-mapper-backend.azurewebsites.net"
        else
          echo "‚ùå DEPLOYMENT FAILED"
          echo "Backend Status: ${{ needs.deploy-backend.result }}"
          echo "Frontend Status: ${{ needs.deploy-frontend.result }}"
          exit 1
        fi